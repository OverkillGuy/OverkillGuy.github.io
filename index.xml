<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jiby&#39;s toolbox</title>
    <link>https://jiby.tech/</link>
    <description>Recent content on Jiby&#39;s toolbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://jiby.tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reframing tickets as engineering records</title>
      <link>https://jiby.tech/post/tickets-as-engineering-records/</link>
      <pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jiby.tech/post/tickets-as-engineering-records/</guid>
      <description>In the software world, tickets (as implemented in Jira, etc) often have a bad reputation, and I think it&amp;rsquo;s undeserved, once we reframe what, or who tickets are for.
In this article I want to revisit the purpose of tickets, usually &amp;ldquo;tickets for project management&amp;rdquo;, explore an alternative viewpoint of &amp;ldquo;tickets as engineering records&amp;rdquo;, and highlight how tickets should be useable as asynchronous alternative to (synchronous) communication.
Tickets as project management Under this fairly common viewpoint, tickets are a project manager&amp;rsquo;s tool, almost inflicted upon devs, likely in an attempt to punish them for their arcane powers over machine, who knows (I&amp;rsquo;m of course exaggerating on purpose).</description>
    </item>
    
    <item>
      <title>Embrace the Early Exit</title>
      <link>https://jiby.tech/post/embrace-early-exit/</link>
      <pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jiby.tech/post/embrace-early-exit/</guid>
      <description>In programming, there are patterns everywhere: patterns of building code, patterns for organising components, even patterns for how to test things. A whole industry is looking for patterns to solve all their problems.
But amongst them all, there&amp;rsquo;s one pattern I whole-heartedly love, it&amp;rsquo;s the Early Exit. In this short and sweet post, I want to declare my undying love to the Early Exit, sharing my excitement.
From If+else to ladders and conditionals hell Functions routinely need to check some edge case isn&amp;rsquo;t hit, usually with more edge cases than actual routine happy-path code lines.</description>
    </item>
    
    <item>
      <title>Offline developer docs: Dash docsets via Zeal</title>
      <link>https://jiby.tech/post/offline-dev-docs-zeal-dash-docsets/</link>
      <pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiby.tech/post/offline-dev-docs-zeal-dash-docsets/</guid>
      <description>Since my earliest university days, I&amp;rsquo;ve spent a lot of time trying to get better at computers, immersing myself in the world of Linux, and generally improving my software development skills.
One of the aspects that was the most helpful to help me grow was attempting to replicate my normal dev workflow, but with less: Learn to operate on Linux not Windows, then learn to do dev via on the terminal instead of GUIs, and eventually learn to do the same but offline, without any network calls.</description>
    </item>
    
    <item>
      <title>My git worfklow</title>
      <link>https://jiby.tech/post/my-git-worfklow/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/my-git-worfklow/</guid>
      <description>Every now and then, at work, I find myself discussing git worfklows, commit messages, branching, releasing, versioning, changelogs etc. Since my opinion has remained fairly consistent for the past few years, I found myself repeating the same points a lot, so I wrote it down. This page is the resulting compilation of my opinions on the software development lifecycle (SDLC), without workplace-specific tangeants.
The article is broken down into ideas + recommendations, with recommendations in bold.</description>
    </item>
    
    <item>
      <title>Quick-start project templates via cookiecutter</title>
      <link>https://jiby.tech/post/quick-start-project-templates-via-cookiecutter/</link>
      <pubDate>Wed, 05 Apr 2023 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/quick-start-project-templates-via-cookiecutter/</guid>
      <description>The most boring part of setting up a new code project is typing the boilerplate: it&amp;rsquo;s easy to forget bits, so we just copy the last project&amp;rsquo;s folder and &amp;ldquo;file the serial numbers off&amp;rdquo; on the project name.
Copy-pasta-driven project setup is not great though, as it&amp;rsquo;s too easy to forget replacing values in obscure files, or misunderstand why project is set up that way in the first place, leading to nasty surprises down the line.</description>
    </item>
    
    <item>
      <title>Presentation: Makefiles for build automation and documentation</title>
      <link>https://jiby.tech/post/makefiles-presentation/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/makefiles-presentation/</guid>
      <description>Last Friday, I performed a presentation to my colleagues about Makefiles, and I want to share it to the public.
Of note, this presentation is setting aside what people usually know of Makefiles (autoconf-generated blobs, opaque to any inspection because machine-created), and instead I introduce the concept of file transformation as a graph, then teach Makefiles basics (using SQL commands as an example). We then move on to my plea for simple Makefiles, and their potential for both documentation (explain what your codebase commands are, to the juniors), and as lightweight automation (avoid typing long boring commands).</description>
    </item>
    
    <item>
      <title>Literate wordle</title>
      <link>https://jiby.tech/post/literate-wordle/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/literate-wordle/</guid>
      <description>I&amp;rsquo;ve recently written a series of articles about Gherkin: its usage for requirements gathering, about its uses in BDD, and a lower-tech alternative to Cucumber, which I&amp;rsquo;m still experimenting with.
I wanted to showcase all of these ideas brought together, as well as show how comfy modern Python tooling can be. But more than writing code, I would need to explain my reasoning as we draft the program. So I picked up again a tool I always wanted to play with: Literate Programming.</description>
    </item>
    
    <item>
      <title>Reinventing IP Fragmentation</title>
      <link>https://jiby.tech/post/reading-rfc-reinventing-ip-fragmentation/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/reading-rfc-reinventing-ip-fragmentation/</guid>
      <description>Let&amp;rsquo;s explore how a file-format design exercise turned into reinventing the wheel, and let&amp;rsquo;s all appreciate how lucky we are that the protocols that the internet are built on have fantastic public documents called RFCs.
Designing a file format I was idly thinking about designing a good binary file format for a side project of mine called qrxfil. The project aims at QR-code-based file export: split a file in many pieces (based on content limit of QR codes) before reassembling it on the other side.</description>
    </item>
    
    <item>
      <title>Low-tech Cucumber replacement</title>
      <link>https://jiby.tech/post/low-tech-cucumber-replacement/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/low-tech-cucumber-replacement/</guid>
      <description>In the previous post, I showed how Gherkin Scenarios provide a great framework for acceptance test definition. I also showed how the dreams of the BDD movement extend to automating Gherkin, using a tool called Cucumber, enforcing traceability of acceptance tests.
In this article, I want to explain my disilusionment towards Cucumber, and show how a low-tech alternative emerged that I believe covers most of the value for none of the effort.</description>
    </item>
    
    <item>
      <title>BDD Dreams, Cucumber And Gherkin</title>
      <link>https://jiby.tech/post/bdd-dreams-cucumber-and-gherkin/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jiby.tech/post/bdd-dreams-cucumber-and-gherkin/</guid>
      <description>In the previous post in this series on Gherkin, I showed the tools that Gherkin Features provide for requirements tracking, and mentioned ambitious goals for the Behaviour-driven Development (BDD) movement. In this article, I want to expand on these BDD ideals, show Gherkin Scenarios, and explain how the dream of traceability led to Cucumber, a tool for automating acceptance test execution, tracing them back to Gherkin Scenarios. We&amp;rsquo;ll set aside my personal feelings on these tools for a future post.</description>
    </item>
    
    <item>
      <title>Gherkin Features for user requirements</title>
      <link>https://jiby.tech/post/gherkin-features-user-requirements/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jiby.tech/post/gherkin-features-user-requirements/</guid>
      <description>The most common mistake I see developers make is building the wrong thing: Not tracking exactly what is required from the start, and instead getting excited about the cool technical problems ahead. Fast forward a few days, weeks, months, showcasing the product near completion, suddenly the rift between what&amp;rsquo;s needed and what was built becomes obvious, in a frenzy of last minute changes to reach the original goal under pressure from deadlines.</description>
    </item>
    
    <item>
      <title>Separating Spam from Ham with the shell</title>
      <link>https://jiby.tech/post/image-list-separate-spam-ham-with-shell/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/image-list-separate-spam-ham-with-shell/</guid>
      <description>Here&amp;rsquo;s how attempting to export images off a Word Document led to a quest for data deduplication and classification using the shell.
The images I wanted to export were MS Word diagrams drawn in Word, rather than PNG files1. Because those doodle-shapes do not export to PNG well, I first copy-pasted them into Powerpoint to get the familiar &amp;ldquo;save as picture&amp;rdquo; context menu. But a couple of images were still deformed beyond recognition.</description>
    </item>
    
    <item>
      <title>Reproducible workspace deployment with Ansible and Vagrant</title>
      <link>https://jiby.tech/post/reproducible-workspace-ansible-vagrant/</link>
      <pubDate>Thu, 11 Jun 2020 00:32:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/reproducible-workspace-ansible-vagrant/</guid>
      <description>Like many developers, I keep track of my configuration files in version control, to make moving to new machines is simpler and share code with others. This process started out for my Emacs config files at first, but grew to consume other aspects: bash functions, git aliases&amp;hellip; Since 2016, I have accumulated over 500 git commits.
Now the dotfiles are tracked, the next biggest pain is to install packages and folder structures and obscure commands required to set up some subsystems needs which config files.</description>
    </item>
    
    <item>
      <title>Using Awk to replace only some lines</title>
      <link>https://jiby.tech/post/awk-replace-some-lines/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jiby.tech/post/awk-replace-some-lines/</guid>
      <description>I was trying to convert bank-issued CSV files that have a weird data layout, for automatic processing by the excellent ledger. This made me learn a new thing about awk. Follow me down the UNIXy goodness!
The data I was getting looks like this:
Transaction Date,Transaction Description,Debit Amount,Credit Amount,Balance 29/02/2018,Restaurant,14.5,,1234.2 12/03/2018,ATM withdrawal,50,,1184.2 23/04/2018,Deposited check,,100,1284.2 Note the last line having 100 in a different column: The problem is that, when receiving money, the transaction is logged in a separate entry (&amp;ldquo;Credit Amount&amp;rdquo;) than the (more common) case of debit, which goes to &amp;ldquo;Debit Amount&amp;rdquo; column.</description>
    </item>
    
    <item>
      <title>Git diff from empty commit</title>
      <link>https://jiby.tech/post/git-diff-empty-repo/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/git-diff-empty-repo/</guid>
      <description>In order to troubleshoot a bug in the very early history of a project using git, I needed a way to show the git diff from &amp;ldquo;nothing&amp;rdquo; to the first commit. Since git keeps a linked graph of commits, what I wanted was a diff from the commit before the first one. Searching the onlines dug up this answer on StackOverflow, showing that there&amp;rsquo;s a specific commit hash we can use to diff from &amp;ldquo;nothing&amp;rdquo; to the first commit:</description>
    </item>
    
    <item>
      <title>Reverse-engineering webapp APIs with Firefox</title>
      <link>https://jiby.tech/post/reverse-engineer-api-with-firefox/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/reverse-engineer-api-with-firefox/</guid>
      <description>I&amp;rsquo;m writing code to back up my user data off a website that lets me see all of my info (including querying by time, account etc) but doesn&amp;rsquo;t have export features (officially). I am certain there&amp;rsquo;s an API behind the site that I just have to make sense of.
Since the webapp is requesting data from the API when I click, we should be able to record the web traffic to explore the API.</description>
    </item>
    
    <item>
      <title>Git diff for prose</title>
      <link>https://jiby.tech/post/git-diff-lines-prose/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/git-diff-lines-prose/</guid>
      <description>When writing long sentences in documentation repositories, git tends to show really unhelpful diffs. They are unreadable because long lines aren&amp;rsquo;t broken, which hides edits happening towards end of line. A colleague of mine asked me if git couldn&amp;rsquo;t be configured to make this sort of thing more obvious. Challenge accepted!
 Figure 1: Can you spot the edit made in a long line of text?
  Kaushal Modi&amp;rsquo;s blog post on git diff for minified JS and CSS inspired this idea for all you prose lovers.</description>
    </item>
    
    <item>
      <title>Git pretty graph</title>
      <link>https://jiby.tech/post/git-graph/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/git-graph/</guid>
      <description>Get a cool graph of commits from the command line! For newbies and experts alike, git is a bit hard to visualize. Here&amp;rsquo;s a handy git command to make understanding git easier.
git log --decorate --oneline --graph  Figure 1: Git graph of this repository
  This can be made into a git command via an entry your ~/.gitconfig:
[alias] graph = log --decorate --oneline --graph Code Snippet 1: Alias &#34;</description>
    </item>
    
    <item>
      <title>Presenting Android terminal with Termux (EdLug)</title>
      <link>https://jiby.tech/post/android-terminal-with-termux/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/android-terminal-with-termux/</guid>
      <description>Last night, I presented about Termux to EdLug, the Edinburgh Linux User group (see the event page on meetup.com) in a talk titled &amp;ldquo;The freedom of shelling out on Android&amp;rdquo;. It was tons of fun showing off how your Android phone/tablet getting a terminal unlocks a powerful tool!
I&#39;ve made the slides available on this website, click on the slide below. Remember that there are speaker notes for people following at home, press `S` to use them.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://jiby.tech/about/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/about/</guid>
      <description>Who am I?
I&amp;rsquo;m Jean-Baptiste Doyon, but everyone calls me Jb (sounds like &amp;ldquo;G-Bay&amp;rdquo; in French). Across many misinterpretations, it evolved into the online handle Jiby (my French friends make it sound like the English initialism for Great Britain), giving the domain name of this website.
While I&amp;rsquo;m natively French, originally from a town near Nice, I moved across Europe a few times for my studies before settling in Edinburgh, Scotland.</description>
    </item>
    
    <item>
      <title>First post</title>
      <link>https://jiby.tech/post/hello-world/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/hello-world/</guid>
      <description>Welcome to my website!
This blog is meant to record some of the thoughts I keep coming back to, or discussions I&amp;rsquo;ve had over and over again with different people. My rule of thumb for inclusion here is &amp;ldquo;if you&amp;rsquo;ve had to say it more than twice, it&amp;rsquo;s time to write it down&amp;rdquo;.
See the About page for my background and motivations.
Look forward more posts as I try to condense my thoughts in written form.</description>
    </item>
    
  </channel>
</rss>
