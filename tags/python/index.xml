<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Jiby&#39;s toolbox</title>
    <link>https://jiby.tech/tags/python/</link>
    <description>Recent content in python on Jiby&#39;s toolbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Apr 2024 00:00:00 +0100</lastBuildDate><atom:link href="https://jiby.tech/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My python toolbox</title>
      <link>https://jiby.tech/post/my-python-toolbox/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/my-python-toolbox/</guid>
      <description>The packaging workflow of Python has historically been a bit messy, starting with pip being just good enough, and virtualenvs being a great idea but a bit unwieldy. Installation was difficult, and tools like anaconda filled the gaps.
Lately, there&amp;rsquo;s been renaissance of package tooling in Python thanks to other languages innovating in the area, inspiring and pollinating the ecosystem, improving the comfort of development.
I want to present here the tools that I use to work with Python, usually latest iterations on well known concepts, to show that Python can be both fun to play with, and safe enough if we use modern tools.</description>
    </item>
    
    <item>
      <title>Quick-start project templates via cookiecutter</title>
      <link>https://jiby.tech/post/quick-start-project-templates-via-cookiecutter/</link>
      <pubDate>Wed, 05 Apr 2023 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/quick-start-project-templates-via-cookiecutter/</guid>
      <description>The most boring part of setting up a new code project is typing the boilerplate: it&amp;rsquo;s easy to forget bits, so we just copy the last project&amp;rsquo;s folder and &amp;ldquo;file the serial numbers off&amp;rdquo; on the project name.
Copy-pasta-driven project setup is not great though, as it&amp;rsquo;s too easy to forget replacing values in obscure files, or misunderstand why project is set up that way in the first place, leading to nasty surprises down the line.</description>
    </item>
    
    <item>
      <title>Literate wordle</title>
      <link>https://jiby.tech/post/literate-wordle/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0100</pubDate>
      
      <guid>https://jiby.tech/post/literate-wordle/</guid>
      <description>I&amp;rsquo;ve recently written a series of articles about Gherkin: its usage for requirements gathering, about its uses in BDD, and a lower-tech alternative to Cucumber, which I&amp;rsquo;m still experimenting with.
I wanted to showcase all of these ideas brought together, as well as show how comfy modern Python tooling can be. But more than writing code, I would need to explain my reasoning as we draft the program. So I picked up again a tool I always wanted to play with: Literate Programming.</description>
    </item>
    
  </channel>
</rss>
